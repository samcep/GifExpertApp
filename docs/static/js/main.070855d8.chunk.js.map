{"version":3,"sources":["components/CategoryAdd.js","helpers/getGfis.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["CategoryAdd","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAmBA,OACI,8BAEC,sBAAMC,SAbU,SAACC,GAEnBA,EAAEC,iBAECJ,EAAWK,OAAOC,QAAU,IAC9BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAoBO,OACvCN,EAAc,MAOb,SACI,uBACGO,KAAK,OACLC,MAAOT,EACPU,SAtBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,e,+BCTjBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEdC,EAFc,iDAEkCC,UAAUH,GAF5C,+DAGDI,MAAMF,GAHL,cAGdG,EAHc,gBAKCA,EAAKC,OALN,uBAKbC,EALa,EAKbA,KAGDC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAZrB,kBAgBbM,GAhBa,4CAAH,sDCCRO,EAAc,SAAC,GAAoB,IAAnBJ,EAAkB,EAAlBA,GAAGC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAGlC,OADAc,QAAQC,IAAIN,EAAGC,EAAMV,GAEjB,sBAAKgB,UAAU,wCAAf,UACI,qBAAKC,IAAKjB,EAAKkB,IAAI,SACnB,4BAAIR,QCFHS,EAAU,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAQpB,ECVuB,SAACA,GAE1B,MAA0Bd,mBAAS,CAE9BqB,KAAM,GACNe,SAAS,IAHd,mBAAOC,EAAP,KAAcC,EAAd,KAqBA,OAfAC,qBAAU,WAEN1B,EAASC,GACP0B,MAAM,SAAAC,GAGCH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAKvB,CAACtB,IAEGuB,EDb0BK,CAAa5B,GAAhCa,EAAZ,EAAON,KAAae,EAApB,EAAoBA,QAIrB,OAHCN,QAAQC,IAAIK,GAIT,qCAGI,oBAAIJ,UAAU,wCAAd,SAAuDlB,IACvD,sBAAKkB,UAAU,YAAf,UAECI,GAAW,wCAGIT,EAAOJ,KAAK,SAAAC,GAAG,OAEX,cAAC,EAAD,eAEQA,GADCA,EAAIC,cEI9BkB,MA/Bf,WAEI,MAAoC3C,mBAAS,CAAC,qBAA9C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KAMA,OACI,gCAGI,8CAEA,cAAC,EAAD,CAAcA,cAAeA,IAC7B,uBAGI6C,EAAWrB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEQA,SAAUA,GADLA,UCZlB+B,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCAdO,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.070855d8.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const CategoryAdd = ({setCategories}) => {\r\n\r\n    const [inputValue, setinputValue] = useState('');\r\n\r\n    //Función para que cambie el estado del input \r\n    \r\n    const handleInputChange = (e) => {\r\n        setinputValue(e.target.value);\r\n    }\r\n    //Función cuando hay submit \r\n\r\n    const handleSubmit = (e) => {\r\n    \r\n       e.preventDefault();\r\n       //Validar el input \r\n       if(inputValue.trim().length >= 2){\r\n        setCategories( cats => [ inputValue,...cats ]);\r\n        setinputValue('');\r\n       }\r\n     \r\n    }\r\n    return (\r\n        <div>\r\n            \r\n         <form onSubmit={handleSubmit}>\r\n             <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n             \r\n             \r\n             />\r\n         </form>\r\n         \r\n         \r\n        </div>\r\n    )\r\n\r\n   \r\n}\r\nCategoryAdd.propTypes = {\r\n        \r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n"," \r\n export const getGifs = async  (category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=UmIn1IiOUWaJ77DELfByA12aEkP1YxR4`;\r\n    const resp = await fetch(url);\r\n\r\n    const {data} = await resp.json();\r\n\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    });\r\n    \r\n    return gifs;\r\n    \r\n}\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({id,title,url}) => {\r\n\r\n    console.log(id,title,url);\r\n    return (\r\n        <div className=\"animate__animated animate__fadeInDown\">\r\n            <img src={url} alt=\"hola\"/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","// import { useEffect,useState } from \"react\"\r\nimport React  from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    //Estado\r\n\r\n    // const [images, setimages] = useState([]);\r\n\r\n   \r\n\r\n     const {data:images ,loading} = useFetchGifs(category);\r\n     console.log(loading);\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n\r\n            <h3 className=\"animate__animated animate__fadeInDown\">{category}</h3>\r\n            <div className=\"card-grid\">\r\n\r\n            {loading && <p>Loading</p>}\r\n\r\n                        {\r\n                            images.map( img => (\r\n\r\n                                <GifGridItem\r\n                                    key={img.id}\r\n                                    {...img}\r\n\r\n                                />\r\n                            ))\r\n\r\n                        }\r\n\r\n\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport {getGifs} from '../helpers/getGfis'\r\n\r\n\r\nexport const useFetchGifs = (category)=> {\r\n\r\n   const [state, setstate] = useState({\r\n\r\n        data: [],\r\n        loading: true\r\n   });\r\n\r\n   useEffect(() => {\r\n       \r\n       getGifs( category)\r\n        .then( imgs => {\r\n\r\n           \r\n                setstate({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n                \r\n           \r\n        });\r\n   }, [category])\r\n\r\n   return state;\r\n}","import React ,{useState} from 'react'\r\nimport { CategoryAdd } from './components/CategoryAdd';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nfunction GifExpertApp() {\r\n\r\n    const [categories, setCategories] = useState(['League of legend']);\r\n    // const handleAdd = () => {\r\n    //    setcategories([...categories , 'Naruto']);\r\n    // }\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n\r\n            <h2>GifExpertApp</h2>\r\n\r\n            <CategoryAdd  setCategories={setCategories}/>\r\n            <hr></hr>\r\n            \r\n            {\r\n                categories.map(category => (\r\n                    <GifGrid \r\n                            key={category}\r\n                            category={category} \r\n                    \r\n                    />\r\n                ))\r\n            \r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\n    <GifExpertApp/>,\n  \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}